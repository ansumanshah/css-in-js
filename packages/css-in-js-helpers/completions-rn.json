{
  "display": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "none",
      "flex"
    ],
    "description": "'display' sets the display type of this component.\n\n It works similarly to 'display' in CSS, but only support 'flex' and 'none'.\n 'flex' is the default."
  },
  "width": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'width' sets the width of this component.\n\n It works similarly to 'width' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/width for more details."
  },
  "height": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'height' sets the height of this component.\n\n It works similarly to 'height' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/height for more details."
  },
  "top": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'top' is the number of logical pixels to offset the top edge of\n this component.\n\n It works similarly to 'top' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/top\n for more details of how 'top' affects layout."
  },
  "left": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'left' is the number of logical pixels to offset the left edge of\n this component.\n\n It works similarly to 'left' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/left\n for more details of how 'left' affects layout."
  },
  "right": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'right' is the number of logical pixels to offset the right edge of\n this component.\n\n It works similarly to 'right' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/right\n for more details of how 'right' affects layout."
  },
  "bottom": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'bottom' is the number of logical pixels to offset the bottom edge of\n this component.\n\n It works similarly to 'bottom' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/bottom\n for more details of how 'bottom' affects layout."
  },
  "minWidth": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'minWidth' is the minimum width for this component, in logical pixels.\n\n It works similarly to 'min-width' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/min-width\n for more details."
  },
  "maxWidth": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'maxWidth' is the maximum width for this component, in logical pixels.\n\n It works similarly to 'max-width' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\n for more details."
  },
  "minHeight": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'minHeight' is the minimum height for this component, in logical pixels.\n\n It works similarly to 'min-height' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/min-height\n for more details."
  },
  "maxHeight": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'maxHeight' is the maximum height for this component, in logical pixels.\n\n It works similarly to 'max-height' in CSS, but in React Native you\n must use points or percentages. Ems and other units are not supported.\n\n See https://developer.mozilla.org/en-US/docs/Web/CSS/max-height\n for more details."
  },
  "margin": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'margin' has the same effect as setting each of\n 'marginTop', 'marginLeft', 'marginBottom', and 'marginRight'.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/margin\n for more details."
  },
  "marginVertical": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'marginVertical' has the same effect as setting both\n 'marginTop' and 'marginBottom'."
  },
  "marginHorizontal": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'marginHorizontal' has the same effect as setting\n both 'marginLeft' and 'marginRight'."
  },
  "marginTop": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'marginTop' works like 'margin-top' in CSS.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top\n for more details."
  },
  "marginBottom": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'marginBottom' works like 'margin-bottom' in CSS.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom\n for more details."
  },
  "marginLeft": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'marginLeft' works like 'margin-left' in CSS.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left\n for more details."
  },
  "marginRight": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'marginRight' works like 'margin-right' in CSS.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right\n for more details."
  },
  "padding": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'padding' has the same effect as setting each of\n 'paddingTop', 'paddingBottom', 'paddingLeft', and 'paddingRight'.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/padding\n for more details."
  },
  "paddingVertical": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'paddingVertical' is like setting both of\n 'paddingTop' and 'paddingBottom'."
  },
  "paddingHorizontal": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "Setting 'paddingHorizontal' is like setting both of\n 'paddingLeft' and 'paddingRight'."
  },
  "paddingTop": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'paddingTop' works like 'padding-top' in CSS.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top\nfor more details."
  },
  "paddingBottom": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'paddingBottom' works like 'padding-bottom' in CSS.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom\nfor more details."
  },
  "paddingLeft": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'paddingLeft' works like 'padding-left' in CSS.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left\nfor more details."
  },
  "paddingRight": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "'paddingRight' works like 'padding-right' in CSS.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right\nfor more details."
  },
  "borderWidth": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderTopWidth": {
    "type": "number",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderRightWidth": {
    "type": "number",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderBottomWidth": {
    "type": "number",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderLeftWidth": {
    "type": "number",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "position": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "absolute",
      "relative"
    ],
    "description": "'position' in React Native is similar to regular CSS, but\n everything is set to 'relative' by default, so 'absolute'\n positioning is always just relative to the parent.\n\n If you want to position a child using specific numbers of logical\n pixels relative to its parent, set the child to have 'absolute'\n position.\n\n If you want to position a child relative to something\n that is not its parent, just don't use styles for that. Use the\n component tree.\n\n See https://github.com/facebook/yoga\n for more details on how 'position' differs between React Native\n and CSS."
  },
  "flexDirection": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "row",
      "row-reverse",
      "column",
      "column-reverse"
    ],
    "description": "'flexDirection' controls which directions children of a container go.\n 'row' goes left to right, 'column' goes top to bottom, and you may\n be able to guess what the other two do. It works like 'flex-direction'\n in CSS, except the default is 'column'.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction\n for more details."
  },
  "flexWrap": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "wrap",
      "nowrap"
    ],
    "description": "'flexWrap' controls whether children can wrap around after they\n hit the end of a flex container.\n It works like 'flex-wrap' in CSS (default: nowrap).\n See https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap\n for more details."
  },
  "justifyContent": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "flex-start",
      "flex-end",
      "center",
      "space-between",
      "space-around"
    ],
    "description": "'justifyContent' aligns children in the main direction.\n For example, if children are flowing vertically, 'justifyContent'\n controls how they align vertically.\n It works like 'justify-content' in CSS (default: flex-start).\n See https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\n for more details."
  },
  "alignItems": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "flex-start",
      "flex-end",
      "center",
      "stretch",
      "baseline"
    ],
    "description": "'alignItems' aligns children in the cross direction.\n For example, if children are flowing vertically, 'alignItems'\n controls how they align horizontally.\n It works like 'align-items' in CSS (default: stretch).\n See https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\n for more details."
  },
  "alignSelf": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "auto",
      "flex-start",
      "flex-end",
      "center",
      "stretch",
      "baseline"
    ],
    "description": "'alignSelf' controls how a child aligns in the cross direction,\n overriding the 'alignItems' of the parent. It works like 'align-self'\n in CSS (default: auto).\n See https://developer.mozilla.org/en-US/docs/Web/CSS/align-self\n for more details."
  },
  "alignContent": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "flex-start",
      "flex-end",
      "center",
      "stretch",
      "space-between",
      "space-around"
    ],
    "description": "'alignContent' controls how rows align in the cross direction,\n overriding the 'alignContent' of the parent.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\n for more details."
  },
  "overflow": {
    "type": "enum",
    "propType": "imagestyleproptypes",
    "values": [
      "visible",
      "hidden"
    ],
    "description": "ImageStylePropTypes"
  },
  "flex": {
    "type": "number",
    "propType": "layout-props",
    "values": [],
    "description": "In React Native 'flex' does not work the same way that it does in CSS.\n 'flex' is a number rather than a string, and it works\n according to the 'Yoga' library\n at https://github.com/facebook/yoga\n\n When 'flex' is a positive number, it makes the component flexible\n and it will be sized proportional to its flex value. So a\n component with 'flex' set to 2 will take twice the space as a\n component with 'flex' set to 1.\n\n When 'flex' is 0, the component is sized according to 'width'\n and 'height' and it is inflexible.\n\n When 'flex' is -1, the component is normally sized according\n 'width' and 'height'. However, if there's not enough space,\n the component will shrink to its 'minWidth' and 'minHeight'.\n\nflexGrow, flexShrink, and flexBasis work the same as in CSS."
  },
  "flexGrow": {
    "type": "number",
    "propType": "layout-props",
    "values": [],
    "description": "LayoutPropTypes"
  },
  "flexShrink": {
    "type": "number",
    "propType": "layout-props",
    "values": [],
    "description": "LayoutPropTypes"
  },
  "flexBasis": {
    "type": "number | string",
    "propType": "layout-props",
    "values": [],
    "description": "LayoutPropTypes"
  },
  "aspectRatio": {
    "type": "number",
    "propType": "layout-props",
    "values": [],
    "description": "Aspect ratio control the size of the undefined dimension of a node. Aspect ratio is a\nnon-standard property only available in react native and not CSS.\n\n- On a node with a set width/height aspect ratio control the size of the unset dimension\n- On a node with a set flex basis aspect ratio controls the size of the node in the cross axis\n  if unset\n- On a node with a measure function aspect ratio works as though the measure function measures\n  the flex basis\n- On a node with flex grow/shrink aspect ratio controls the size of the node in the cross axis\n  if unset\n- Aspect ratio takes min/max dimensions into account"
  },
  "zIndex": {
    "type": "number",
    "propType": "layout-props",
    "values": [],
    "description": "'zIndex' controls which components display on top of others.\n Normally, you don't use 'zIndex'. Components render according to\n their order in the document tree, so later components draw over\n earlier ones. 'zIndex' may be useful if you have animations or custom\n modal interfaces where you don't want this behavior.\n\n It works like the CSS 'z-index' property - components with a larger\n 'zIndex' will render on top. Think of the z-direction like it's\n pointing from the phone into your eyeball.\n See https://developer.mozilla.org/en-US/docs/Web/CSS/z-index for\n more details."
  },
  "direction": {
    "type": "enum",
    "propType": "layout-props",
    "values": [
      "inherit",
      "ltr",
      "rtl"
    ],
    "description": "'direction' specifies the directional flow of the user interface.\n The default is 'inherit', except for root node which will have\n value based on the current locale.\n See https://facebook.github.io/yoga/docs/rtl/\n for more details.\n @platform ios"
  },
  "transform": {
    "type": "arrayOf",
    "propType": "transforms",
    "values": [],
    "description": "TransformPropTypes"
  },
  "transformMatrix": {
    "type": "",
    "propType": "transforms",
    "values": [],
    "description": "TransformPropTypes"
  },
  "decomposedMatrix": {
    "type": "",
    "propType": "transforms",
    "values": [],
    "description": "TransformPropTypes"
  },
  "shadowColor": {
    "type": "",
    "propType": "shadow-props",
    "values": [],
    "description": "Sets the drop shadow color\n@platform ios"
  },
  "shadowOffset": {
    "type": "shape",
    "propType": "shadow-props",
    "values": [],
    "description": "Sets the drop shadow offset\n@platform ios"
  },
  "shadowOpacity": {
    "type": "number",
    "propType": "shadow-props",
    "values": [],
    "description": "Sets the drop shadow opacity (multiplied by the color's alpha component)\n@platform ios"
  },
  "shadowRadius": {
    "type": "number",
    "propType": "shadow-props",
    "values": [],
    "description": "Sets the drop shadow blur radius\n@platform ios"
  },
  "backfaceVisibility": {
    "type": "enum",
    "propType": "imagestyleproptypes",
    "values": [
      "visible",
      "hidden"
    ],
    "description": "ImageStylePropTypes"
  },
  "backgroundColor": {
    "type": "",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderColor": {
    "type": "",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderTopColor": {
    "type": "",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderRightColor": {
    "type": "",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderBottomColor": {
    "type": "",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderLeftColor": {
    "type": "",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "ViewStylePropTypes"
  },
  "borderRadius": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderTopLeftRadius": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderTopRightRadius": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderBottomLeftRadius": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderBottomRightRadius": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "borderStyle": {
    "type": "enum",
    "propType": "viewstyleproptypes",
    "values": [
      "solid",
      "dotted",
      "dashed"
    ],
    "description": "ViewStylePropTypes"
  },
  "opacity": {
    "type": "number",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "elevation": {
    "type": "number",
    "propType": "viewstyleproptypes",
    "values": [],
    "description": "(Android-only) Sets the elevation of a view, using Android's underlying\n[elevation API](https://developer.android.com/training/material/shadows-clipping.html#Elevation).\nThis adds a drop shadow to the item and affects z-order for overlapping views.\nOnly supported on Android 5.0+, has no effect on earlier versions.\n@platform android"
  },
  "color": {
    "type": "",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "fontFamily": {
    "type": "string",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "fontSize": {
    "type": "number",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "fontStyle": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "normal",
      "italic"
    ],
    "description": "TextStylePropTypes"
  },
  "fontWeight": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "normal",
      "bold",
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "700",
      "800",
      "900"
    ],
    "description": "Specifies font weight. The values 'normal' and 'bold' are supported for\nmost fonts. Not all fonts have a variant for each of the numeric values,\nin that case the closest one is chosen."
  },
  "fontVariant": {
    "type": "arrayOf",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "@platform ios"
  },
  "textShadowOffset": {
    "type": "shape",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "textShadowRadius": {
    "type": "number",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "textShadowColor": {
    "type": "",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "letterSpacing": {
    "type": "number",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "@platform ios"
  },
  "lineHeight": {
    "type": "number",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "TextStylePropTypes"
  },
  "textAlign": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "auto",
      "left",
      "right",
      "center",
      "justify"
    ],
    "description": "Specifies text alignment. The value 'justify' is only supported on iOS and\nfallbacks to 'left' on Android."
  },
  "textAlignVertical": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "auto",
      "top",
      "bottom",
      "center"
    ],
    "description": "@platform android"
  },
  "includeFontPadding": {
    "type": "bool",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "Set to 'false' to remove extra font padding intended to make space for certain ascenders / descenders.\nWith some fonts, this padding can make text look slightly misaligned when centered vertically.\nFor best results also set 'textAlignVertical' to 'center'. Default is true.\n@platform android"
  },
  "textDecorationLine": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "none",
      "underline",
      "line-through",
      "underline line-through"
    ],
    "description": "TextStylePropTypes"
  },
  "textDecorationStyle": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "solid",
      "double",
      "dotted",
      "dashed"
    ],
    "description": "@platform ios"
  },
  "textDecorationColor": {
    "type": "",
    "propType": "textstyleproptypes",
    "values": [],
    "description": "@platform ios"
  },
  "writingDirection": {
    "type": "enum",
    "propType": "textstyleproptypes",
    "values": [
      "auto",
      "ltr",
      "rtl"
    ],
    "description": "@platform ios"
  },
  "resizeMode": {
    "type": "enum",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "ImageStylePropTypes"
  },
  "tintColor": {
    "type": "",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "Changes the color of all the non-transparent pixels to the tintColor."
  },
  "overlayColor": {
    "type": "string",
    "propType": "imagestyleproptypes",
    "values": [],
    "description": "When the image has rounded corners, specifying an overlayColor will\ncause the remaining space in the corners to be filled with a solid color.\nThis is useful in cases which are not supported by the Android\nimplementation of rounded corners:\n  - Certain resize modes, such as 'contain'\n  - Animated GIFs\n\nA typical way to use this prop is with images displayed on a solid\nbackground and setting the 'overlayColor' to the same color\nas the background.\n\nFor details of how this works under the hood, see\nhttp://frescolib.org/docs/rounded-corners-and-circles.html\n\n@platform android"
  }
}
